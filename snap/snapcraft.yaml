name: matter-pi-gpio-commander
version: "1.0.1"
summary: Raspberry Pi GPIO as a Matter lighting app
description: Refer to https://snapcraft.io/matter-pi-gpio-commander

# Apart from WiringPi (LGPL-3.0-only), everything else has Apache-2.0 license
license: Apache-2.0 AND LGPL-3.0-only

grade: stable
confinement: strict

base: core22
architectures:
  - build-on: arm64
  # - build-on: armhf
  # - build-on: amd64

plugs:
  # This is to communicate with the OpenThread Border Router snap (https://snapcraft.io/openthread-border-router)
  # when enabling Thread on this application.
  otbr-dbus-wpan0:
    interface: dbus
    bus: system
    name: io.openthread.BorderRouter.wpan0

layout:
  /mnt:
    bind: $SNAP_COMMON/mnt

parts:
  wiring-pi:
    plugin: nil
    source: https://github.com/WiringPi/WiringPi.git
    source-depth: 1
    source-tag: 2.61-1
    override-build: |
      WIRINGPI_SUDO="" ./build

      mkdir -p $CRAFT_PART_INSTALL/lib
      cp -v /usr/local/lib/libwiringPi.so* $CRAFT_PART_INSTALL/lib/

      mkdir -p $CRAFT_PART_INSTALL/usr/share/doc/libwiringPi
      cp COPYING.LESSER $CRAFT_PART_INSTALL/usr/share/doc/libwiringPi/
    build-packages: [git, gcc, g++]

  test-blink:
    after: [wiring-pi]
    plugin: nil
    source: .
    override-build: |
      g++ -Wall test-blink.cpp -lwiringPi -o test-blink
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp test-blink $CRAFT_PART_INSTALL/bin/
  
  connectedhomeip:
    plugin: nil
    source: https://github.com/project-chip/connectedhomeip.git
    source-depth: 1
    # source-tag: v1.1.0.1
    source-commit: 6b01cb977127eb8547ce66d5b627061dc2dd6c90
    source-submodules: []
    override-pull: |
      craftctl default
      # shallow clone the submodules
      scripts/checkout_submodules.py --shallow --platform linux

  zap:
    plugin: nil
    source: https://github.com/project-chip/zap.git
    source-depth: 1
    source-tag: v2023.09.28
    build-environment:
      - NODE_VERSION: v18.16.1
    build-packages:
      - build-essential 
      - libpango1.0-dev 
      - libjpeg-dev 
      - libgif-dev 
      - librsvg2-dev
      - wget
    override-build: |
      if [[ $SNAP_ARCH == "arm64" ]]; then
        # Install node+npm
        NODE=node-$NODE_VERSION-linux-$SNAP_ARCH
        wget https://nodejs.org/dist/$NODE_VERSION/$NODE.tar.xz
        tar -xJf $NODE.tar.xz
        export PATH=$PWD/$NODE/bin:$PATH

        # Install zap
        npm install

        # Define the environment needed for the app build
        echo "export PATH=$PWD/$NODE/bin:$PATH" > env
        echo "export ZAP_DEVELOPMENT_PATH=$PWD" >> env
        cat env
      fi

  lighting:
    after: [wiring-pi, connectedhomeip, zap]
    plugin: nil
    source: app
    build-environment:
      - ZAP_ENV: /root/parts/zap/build/env
    override-build: |
      # Setup ZAP paths; installed in the corresponding part
      test -f $ZAP_ENV && source $ZAP_ENV
      
      # Change to SDK's directory to allow caching of the activation
      # regardless of this part's pull and build status.
      cd ../../connectedhomeip/src

      # The project writes its data to /tmp which isn't persisted.
      #
      # There is currently has no known way of overriding the default paths to
      #   both storage and security config files.
      #
      # Snap does not allow bind-mounting a persistent directory on /tmp, 
      #  so we need to first replace it in the source with another path, i.e. /mnt.
      # See the top-level layout definition which bind-mounts a persisted
      #   directory within the confined snap space on /mnt.
      #
      # Replace storage paths:
      sed -i 's/\/tmp/\/mnt/g' src/platform/Linux/CHIPLinuxStorage.h
      # Replace key-value store path:
      sed -i 's/\/tmp/\/mnt/g' src/platform/Linux/CHIPPlatformConfig.h

      cd $CRAFT_PART_BUILD
      cd ../../connectedhomeip/src

      # To avoid unrelated activation errors, don't treat unset variables as error
      set +u
      source scripts/activate.sh
      set -u

      cd examples/lighting-app/linux/

      # Copy and replace the application files
      cp -vr $CRAFT_PART_BUILD/* .

      gn gen out/build
      ninja -C out/build

      ldd out/build/chip-lighting-app
      
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp out/build/chip-lighting-app $CRAFT_PART_INSTALL/bin/lighting-app        
    build-packages:
      - git
      - gcc
      - g++
      - pkg-config
      - libssl-dev
      - libdbus-1-dev
      - libglib2.0-dev
      - libavahi-client-dev
      - ninja-build
      - python3-venv
      - python3-dev
      - python3-pip
      - unzip
      - libgirepository1.0-dev
      - libcairo2-dev
      - libreadline-dev
      - generate-ninja

  local-bin:
    plugin: nil
    source: snap/local/bin/
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp -v run.sh $CRAFT_PART_INSTALL/bin/
      cp -v load-snap-options.sh $CRAFT_PART_INSTALL/bin/

apps:
  lighting:
    daemon: simple
    command-chain:
      - bin/load-snap-options.sh
    command: bin/run.sh
    install-mode: disable
    plugs:
      - network
      - network-bind
      - bluez
      - avahi-control
      - gpio-memory-control
      - otbr-dbus-wpan0

  help:
    command: bin/lighting-app -h

  # This app is to test the GPIO control without using a Matter controller
  test-blink:
    command-chain:
      - bin/load-snap-options.sh
    command: bin/test-blink
    plugs:
      - gpio-memory-control
